#include <limits.h>
#include <stdio.h>

int max(int a, int b) { return (a > b) ? a : b; }

int max(int a, int b, int c) { return max(max(a, b), c); }

int maxCrossingSum(int arr[], int l, int m, int h)
{
    int sum = 0;
    int lS = INT_MIN;
    for (int i = m; i >= l; i--) {
        sum = sum + arr[i];
        if (sum > lS)
            lS = sum;
    }

    sum = 0;
    int rs = INT_MIN;
    for (int i = m; i <= h; i++) {
        sum = sum + arr[i];
        if (sum > rs)
            rs = sum;
    }
    return max(lS + rs - arr[m], lS, rs);
}

int maxSubArraySum(int arr[], int l, int h)
{
    if (l > h)
        return INT_MIN;
    if (l == h)
        return arr[l];

    int m = (l + h) / 2;

    return max(maxSubArraySum(arr, l, m - 1),
        maxSubArraySum(arr, m + 1, h),
        maxCrossingSum(arr, l, m, h));
}

int main()
{
    int arr[] = { 8, 99, -4, 7, 5 };
    int n = sizeof(arr) / sizeof(arr[0]);
    int max_sum = maxSubArraySum(arr, 0, n - 1);
    printf("Maximum contiguous sum is %d\n", max_sum);
    getchar();
    return 0;
}
